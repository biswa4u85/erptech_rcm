{
  "version": 3,
  "sources": ["../../../../../apps/erptech_rcm/erptech_rcm/custom_scripts/pos_scripts/pos_mettler_toledo.js"],
  "sourcesContent": ["var port;\nvar textEncoder;\nvar weight = 0;\nvar weightLoop = false;\nvar portConnected = false;\nvar reader;\n/*window.writer;\nerpnext.PointOfSale.Toledo.connect = async function(){\n\twindow.port = await navigator.serial.getPorts();\n\tawait window.port.open({baudRate: 9600, dataBits: 7, parity: \"even\", stopBits: 1});\n\treceiveData();\n\tconst textEncoder = new TextEncoderStream();\n\ttextEncoder.readable.pipeTo(window.port.writable);\n\twindow.writer = textEncoder.writable.getWriter();\n\twindow.setInterval(getweight, 1000);\n}\n\nerpnext.PointOfSale.Toledo.getWeight = async function(){\n\tasync function getweight(){\n\t\t// Prompt user to select any serial port.\n\t\tawait window.writer.write(\"W\");\n\t}\n}*/\n\nonmessage = function(message){\n\tif(message.data.command == \"connect\"){\n\t\tconnectPort();\n\t}\n    else if(message.data.command == \"start\")\n    {\n\t\tconsole.log(\"Start called\");\n\t\tweightLoop = true;\n        startWeight();\n    }\n\telse if(message.data.command == \"stop\"){\n\t\tweightLoop = false;\n\t}\n}\n\nasync function connectPort(){\n\tvar portFound = false;\n    var ports = await navigator.serial.getPorts();\n\ttextEncoder = new TextEncoderStream();\n\tif(ports.length > 0){\n\t\t\n\t\tport = ports[0];\n\t\tvar stop = false;\n\t\ttry{\n\t\t\tawait port.open({baudRate: 9600, dataBits: 7, parity: \"even\", stopBits: 1});\n\t\t\ttextEncoder.readable.pipeTo(port.writable);\n\t\t\treader = port.readable.getReader();\n\t\t\tportConnected = true;\n\t\t}\n\t\tcatch(error){\n\t\t\t//TODO: Catch connection errors\n\t\t}\n\t}\n}\n\nasync function startWeight(){\n\tif(portConnected){\n\t\tconsole.log(\"Port connected\");\n\t\ttry{\n\t\t\tvar strWeight = \"\";\n\t\t\tawait sendCommand(\"W\");\n\t\t}catch(error){\n\t\t\t//TODO: Catch error if port already connected\n\t\t}\n\t\twhile(port.readable){\n\t\t\tif(!weightLoop){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttry{\n\t\t\t\twhile(true){\n\t\t\t\t\tif(!weightLoop){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst {value, done} = await reader.read();\n\t\t\t\t\tif(done){\n\t\t\t\t\t\t//reader.releaseLock();\n\t\t\t\t\t}\n\t\t\t\t\tif(value){\n\t\t\t\t\t\tvar [response, completed] = await decodeData(value);\n\t\t\t\t\t\tif(!completed){\n\t\t\t\t\t\t\tstrWeight.concat(response);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t//If all the result is returned in a single chunk\n\t\t\t\t\t\t\tif(strWeight == \"\"){\n\t\t\t\t\t\t\t\tstrWeight = response;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tstrWeight.concat(response)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar newWeight = parseFloat(strWeight);\n\t\t\t\t\t\t\tconsole.log({\"new weight\": newWeight});\n\t\t\t\t\t\t\tif(newWeight != weight && !isNaN(newWeight)){\n\t\t\t\t\t\t\t\tweight = newWeight;\n\t\t\t\t\t\t\t\tpostMessage({\n\t\t\t\t\t\t\t\t\t\"message\": \"weight\",\n\t\t\t\t\t\t\t\t\t\"weight\": weight\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsetTimeout(async function(){\n\t\t\t\t\t\t\t\t//Wait for 500ms to give the weight device time to process result \n\t\t\t\t\t\t\t\t//and give script time to accept new command\n\t\t\t\t\t\t\t\tstrWeight = \"\";\n\t\t\t\t\t\t\t\tawait sendCommand(\"W\");\n\t\t\t\t\t\t\t}, 500);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}catch(error){\n\t\t\t\t//TODO: Catch errors relating to writing and reading from port\n\t\t\t\tconsole.log(error.message);\n\t\t\t} finally{\n\t\t\t\t//reader.releaseLock();\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\t//TODO: Call function to connect device then read weight\n\t}\n}\n\nasync function sendCommand(command){\n\ttry{\n\t\tvar writer = textEncoder.writable.getWriter();\n\t\tawait writer.write(command);\n\t\twriter.releaseLock();\n\t\t//writer.close();\n\t}\n\tcatch(error){\n\t\tconsole.log(error.message);\n\t}\n}\n\nasync function decodeData(data){\n\tvar str = \"\";\n\tvar completed = false;\n\tfor(var i = 0; i < data.byteLength; i++){\n\t\t//Check if the value is not the ASCII STR (Start of Text) character\n\t\t//Or is an ASCII cr indicating that the weight has been completely sent\n\t\tif(data[i] != 2){\n\t\t\tif(data[i] == 13){\n\t\t\t\tcompleted = true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tstr = str.concat(String.fromCharCode(data[i]));\n\t\t\t}\n\t\t}\n\t}\n\treturn [str, completed];\n}\n\n"],
  "mappings": "MAAA,IAAIA,EACAC,EACAC,EAAS,EACTC,EAAa,GACbC,EAAgB,GAChBC,EAmBJ,UAAY,SAASC,EAAQ,CACzBA,EAAQ,KAAK,SAAW,UAC1BC,EAAY,EAEFD,EAAQ,KAAK,SAAW,SAElC,QAAQ,IAAI,cAAc,EAC1BH,EAAa,GACPK,EAAY,GAEXF,EAAQ,KAAK,SAAW,SAC/BH,EAAa,GAEf,EAEA,eAAeI,GAAa,CAC3B,IAAIE,EAAY,GACTC,EAAQ,MAAM,UAAU,OAAO,SAAS,EAE/C,GADAT,EAAc,IAAI,kBACfS,EAAM,OAAS,EAAE,CAEnBV,EAAOU,EAAM,GACb,IAAIC,EAAO,GACX,GAAG,CACF,MAAMX,EAAK,KAAK,CAAC,SAAU,KAAM,SAAU,EAAG,OAAQ,OAAQ,SAAU,CAAC,CAAC,EAC1EC,EAAY,SAAS,OAAOD,EAAK,QAAQ,EACzCK,EAASL,EAAK,SAAS,UAAU,EACjCI,EAAgB,EACjB,OACMQ,EAAN,CAEA,CACD,CACD,CAEA,eAAeJ,GAAa,CAC3B,GAAGJ,EAAc,CAChB,QAAQ,IAAI,gBAAgB,EAC5B,GAAG,CACF,IAAIS,EAAY,GAChB,MAAMC,EAAY,GAAG,CACtB,OAAOF,EAAN,CAED,CACA,KAAMZ,EAAK,UACNG,GAGJ,GAAG,CACF,KACKA,GADM,CAIV,GAAM,CAAC,MAAAY,EAAO,KAAAC,CAAI,EAAI,MAAMX,EAAO,KAAK,EAIxC,GAAGU,EAAM,CACR,GAAI,CAACE,EAAUC,CAAS,EAAI,MAAMC,EAAWJ,CAAK,EAClD,GAAG,CAACG,EACHL,EAAU,OAAOI,CAAQ,MAEtB,CAEAJ,GAAa,GACfA,EAAYI,EAGZJ,EAAU,OAAOI,CAAQ,EAE1B,IAAIG,EAAY,WAAWP,CAAS,EACpC,QAAQ,IAAI,CAAC,aAAcO,CAAS,CAAC,EAClCA,GAAalB,GAAU,CAAC,MAAMkB,CAAS,IACzClB,EAASkB,EACT,YAAY,CACX,QAAW,SACX,OAAUlB,CACX,CAAC,GAEF,WAAW,gBAAgB,CAG1BW,EAAY,GACZ,MAAMC,EAAY,GAAG,CACtB,EAAG,GAAG,CACP,CACD,CACD,CACD,OAAOF,EAAN,CAEA,QAAQ,IAAIA,EAAM,OAAO,CAC1B,QAAE,CAEF,CAEF,CAID,CAEA,eAAeE,EAAYO,EAAQ,CAClC,GAAG,CACF,IAAIC,EAASrB,EAAY,SAAS,UAAU,EAC5C,MAAMqB,EAAO,MAAMD,CAAO,EAC1BC,EAAO,YAAY,CAEpB,OACMV,EAAN,CACC,QAAQ,IAAIA,EAAM,OAAO,CAC1B,CACD,CAEA,eAAeO,EAAWI,EAAK,CAG9B,QAFIC,EAAM,GACNN,EAAY,GACRO,EAAI,EAAGA,EAAIF,EAAK,WAAYE,IAGhCF,EAAKE,IAAM,IACVF,EAAKE,IAAM,GACbP,EAAY,GAGZM,EAAMA,EAAI,OAAO,OAAO,aAAaD,EAAKE,EAAE,CAAC,GAIhD,MAAO,CAACD,EAAKN,CAAS,CACvB",
  "names": ["port", "textEncoder", "weight", "weightLoop", "portConnected", "reader", "message", "connectPort", "startWeight", "portFound", "ports", "stop", "error", "strWeight", "sendCommand", "value", "done", "response", "completed", "decodeData", "newWeight", "command", "writer", "data", "str", "i"]
}
